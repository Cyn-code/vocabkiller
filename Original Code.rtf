{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import React, \{ useState, useEffect, useRef \} from 'react';\
\
export default function App() \{\
  const [inputText, setInputText] = useState('');\
  const [uniqueWords, setUniqueWords] = useState([]);\
  const [noteWords, setNoteWords] = useState([]);\
  const [searchText, setSearchText] = useState('');\
  const [totalWords, setTotalWords] = useState(0);\
  const [uniqueCount, setUniqueCount] = useState(0);\
  const [searchResults, setSearchResults] = useState([]);\
  const [activeResultIndex, setActiveResultIndex] = useState(-1);\
  \
  // Refs\
  const textAreaRef = useRef(null);\
  const searchInputRef = useRef(null);\
\
  // Calculate words\
  useEffect(() => \{\
    if (!inputText.trim()) \{\
      setUniqueWords([]);\
      setTotalWords(0);\
      setUniqueCount(0);\
      return;\
    \}\
\
    // Split text into words\
    const rawWords = inputText.match(/\\b[\\w'-]+\\b/g) || [];\
    \
    // Clean words and count\
    const cleanedWords = rawWords.map(word => \
      word.replace(/^\\W+|\\W+$/g, '').toLowerCase()\
    ).filter(word => word.length > 0);\
\
    // Count total words\
    setTotalWords(cleanedWords.length);\
\
    // Build word map\
    const wordMap = new Map();\
    cleanedWords.forEach(word => \{\
      wordMap.set(word, (wordMap.get(word) || 0) + 1);\
    \});\
\
    // Convert to array and sort\
    const wordArray = [...wordMap.entries()]\
      .map(([word, count]) => (\{ word, count \}))\
      .sort((a, b) => a.word.localeCompare(b.word));\
\
    setUniqueWords(wordArray);\
    setUniqueCount(wordArray.length);\
  \}, [inputText]);\
\
  // Find search results\
  useEffect(() => \{\
    if (!searchText.trim()) \{\
      setSearchResults([]);\
      setActiveResultIndex(-1);\
      return;\
    \}\
\
    try \{\
      const regex = new RegExp(`\\\\b$\{searchText\}\\\\b`, 'gi');\
      const results = [];\
      let match;\
      \
      while ((match = regex.exec(inputText)) !== null) \{\
        results.push(match.index);\
      \}\
      \
      setSearchResults(results);\
      setActiveResultIndex(results.length > 0 ? 0 : -1);\
    \} catch (e) \{\
      setSearchResults([]);\
      setActiveResultIndex(-1);\
    \}\
  \}, [inputText, searchText]);\
\
  // Handle search input\
  const handleSearchChange = (e) => \{\
    setSearchText(e.target.value);\
    setActiveResultIndex(-1);\
  \};\
\
  // Handle search keyboard navigation\
  const handleSearchKeyDown = (e) => \{\
    if (e.key === 'Enter') \{\
      e.preventDefault(); // Prevent form submission\
      \
      if (searchResults.length > 0) \{\
        const nextIndex = activeResultIndex >= 0 ? activeResultIndex + 1 : 0;\
        const finalIndex = nextIndex >= searchResults.length ? 0 : nextIndex;\
        \
        setActiveResultIndex(finalIndex);\
        \
        setTimeout(() => \{\
          if (textAreaRef.current) \{\
            const startPos = searchResults[finalIndex];\
            const endPos = startPos + searchText.length;\
            \
            textAreaRef.current.focus();\
            textAreaRef.current.setSelectionRange(startPos, endPos);\
            \
            // Calculate and set scroll position\
            const lineHeight = 20;\
            const lines = inputText.substring(0, startPos).split('\\n');\
            textAreaRef.current.scrollTop = Math.max(0, (lines.length - 1) * lineHeight - 40);\
          \}\
        \}, 0);\
      \}\
    \}\
  \};\
\
  // Handle search navigation\
  const handleSearchNavigation = (direction) => \{\
    if (searchResults.length === 0 || activeResultIndex === -1) return;\
    \
    const newIndex = activeResultIndex + direction;\
    const clampedIndex = Math.max(0, Math.min(newIndex, searchResults.length - 1));\
    \
    if (clampedIndex !== activeResultIndex && textAreaRef.current) \{\
      const startPos = searchResults[clampedIndex];\
      const endPos = startPos + searchText.length;\
      \
      setActiveResultIndex(clampedIndex);\
      \
      setTimeout(() => \{\
        textAreaRef.current.focus();\
        textAreaRef.current.setSelectionRange(startPos, endPos);\
        \
        // Calculate and set scroll position\
        const lineHeight = 20;\
        const lines = inputText.substring(0, startPos).split('\\n');\
        textAreaRef.current.scrollTop = Math.max(0, (lines.length - 1) * lineHeight - 40);\
      \}, 0);\
    \}\
  \};\
\
  // Filter unique words by search term\
  const filteredWords = searchText \
    ? uniqueWords.filter(w => w.word.toLowerCase().includes(searchText.toLowerCase()))\
    : uniqueWords;\
\
  return (\
    <div className="min-h-screen bg-gray-100">\
      <div className="container mx-auto p-6">\
        <div className="flex gap-6 h-[calc(100vh-8rem)]">\
          \{/* Column 1: Input Text */\}\
          <div className="w-[40%] bg-white rounded-lg shadow-md overflow-hidden flex flex-col">\
            <div className="bg-blue-50 border-b border-blue-100 p-4">\
              <h2 className="font-semibold text-blue-800">Original Text</h2>\
              \{/* Search in text */\}\
              <div className="mt-2 flex gap-2">\
                <input\
                  ref=\{searchInputRef\}\
                  type="text"\
                  value=\{searchText\}\
                  onChange=\{handleSearchChange\}\
                  onKeyDown=\{handleSearchKeyDown\}\
                  className="flex-1 p-2 text-sm border border-gray-200 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"\
                  placeholder="Search text..."\
                />\
                <button\
                  type="button"\
                  onClick=\{() => handleSearchNavigation(-1)\}\
                  disabled=\{searchResults.length === 0\}\
                  className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 text-sm rounded-md disabled:opacity-50"\
                >\
                  \uc0\u8592 \
                </button>\
                <button\
                  type="button"\
                  onClick=\{() => handleSearchNavigation(1)\}\
                  disabled=\{searchResults.length === 0\}\
                  className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 text-sm rounded-md disabled:opacity-50"\
                >\
                  \uc0\u8594 \
                </button>\
              </div>\
              <div className="mt-2 flex items-center justify-between">\
                <span className="text-sm text-gray-600">\
                  Total Words: \{totalWords\}\
                </span>\
                \{searchResults.length > 0 && activeResultIndex >= 0 && (\
                  <span className="text-sm text-blue-600">\
                    \{activeResultIndex + 1\} of \{searchResults.length\}\
                  </span>\
                )\}\
              </div>\
            </div>\
            \
            <div className="flex-1 p-4 overflow-auto">\
              <textarea\
                ref=\{textAreaRef\}\
                value=\{inputText\}\
                onChange=\{(e) => setInputText(e.target.value)\}\
                className="w-full h-full p-4 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-all duration-300 resize-none"\
                placeholder="Paste your text here..."\
              ></textarea>\
            </div>\
          </div>\
\
          \{/* Column 2: Unique Words */\}\
          <div className="w-[20%] bg-white rounded-lg shadow-md overflow-hidden flex flex-col">\
            <div className="bg-indigo-50 border-b border-indigo-100 p-4">\
              <h2 className="font-semibold text-indigo-800">Unique Words</h2>\
              <div className="mt-2 flex items-center justify-between">\
                <span className="text-sm text-gray-600">\
                  Unique: \{uniqueCount\}\
                </span>\
              </div>\
            </div>\
            <div className="flex-1 p-4 overflow-auto">\
              \{filteredWords.length > 0 ? (\
                <div className="space-y-1">\
                  \{filteredWords.map((item, idx) => (\
                    <div \
                      key=\{idx\}\
                      onClick=\{() => setNoteWords([item.word])\}\
                      className=\{`p-2 rounded-md cursor-pointer transition-colors flex justify-between items-center $\{\
                        noteWords.includes(item.word)\
                          ? 'bg-indigo-100 text-indigo-800'\
                          : 'hover:bg-gray-50'\
                      \}`\}\
                    >\
                      <span>\{item.word\}</span>\
                      <span className="bg-indigo-100 text-indigo-700 text-xs px-2 py-1 rounded-full">\
                        \{item.count\}\
                      </span>\
                    </div>\
                  ))\}\
                </div>\
              ) : (\
                <div className="text-center py-4 text-gray-500 text-sm">\
                  \{inputText.trim() ? 'No matching words' : 'No words found'\}\
                </div>\
              )\}\
            </div>\
          </div>\
\
          \{/* Column 3: Notes */\}\
          <div className="w-[40%] bg-white rounded-lg shadow-md overflow-hidden flex flex-col">\
            <div className="bg-purple-50 border-b border-purple-100 p-4">\
              <h2 className="font-semibold text-purple-800">Study Notes</h2>\
            </div>\
            <div className="flex-1 p-4 overflow-auto">\
              \{noteWords.length > 0 ? (\
                <div className="space-y-6">\
                  <div className="space-y-2">\
                    \{inputText.split(/(?<=[.!?])\\s+/).filter(sentence => \
                      new RegExp(`\\\\b$\{noteWords[0]\}\\\\b`, 'i').test(sentence)\
                    ).map((sentence, i) => (\
                      <div key=\{i\} className="border border-purple-100 rounded-lg p-3">\
                        \{sentence.split(new RegExp(`(\\\\b$\{noteWords[0]\}\\\\b)`, 'gi')).map((part, j) => (\
                          part.toLowerCase() === noteWords[0].toLowerCase() ? (\
                            <span key=\{j\} className="bg-yellow-200 font-medium">\
                              \{part\}\
                            </span>\
                          ) : part\
                        ))\}\
                      </div>\
                    ))\}\
                  </div>\
                </div>\
              ) : (\
                <div className="text-center py-12 text-gray-500">\
                  <p className="text-sm">Click a word in the list to see sentences</p>\
                </div>\
              )\}\
            </div>\
          </div>\
        </div>\
      </div>\
    </div>\
  );\
\}}