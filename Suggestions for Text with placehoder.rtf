{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Great! You're already on the right track with a clear goal and structure. Since you're building a **static HTML website** (possibly with JavaScript for interactivity), here's a **step-by-step guide** to implement your **"Context-Based Vocabulary Practice"** feature.\
\
---\
\
## \uc0\u9989  Step-by-Step Implementation Guide\
\
---\
\
### **1. Folder & File Structure**\
Make sure your project has the following files:\
\
```\
/index.html\
/learn-sentences.html           \uc0\u8592  "Learn Sentences with Unique Words"\
/context-practice.html          \uc0\u8592  New subpage (your feature)\
/css/\
  \uc0\u9492 \u9472 \u9472  style.css\
/js/\
  \uc0\u9492 \u9472 \u9472  script.js                 \u8592  Shared logic\
```\
\
---\
\
### **2. Add the Button in `learn-sentences.html`**\
\
Add a button under the text column that navigates to the practice page and passes data.\
\
```html\
<!-- In learn-sentences.html -->\
<div class="text-column">\
  <!-- Your existing sentences -->\
  <div id="sentences">\
    <p data-words="love,hope">I love hope and peace.</p>\
    <p data-words="peace">Peace begins with a smile.</p>\
  </div>\
\
  <!-- New Button -->\
  <button id="start-context-practice" class="practice-btn">\
    Context-Based Vocabulary Practice\
  </button>\
</div>\
```\
\
#### \uc0\u9989  CSS for Button (`style.css`)\
```css\
.practice-btn \{\
  background-color: white;\
  color: black;\
  border: 1px solid #ccc;\
  padding: 10px 16px;\
  font-size: 16px;\
  cursor: pointer;\
  margin-top: 20px;\
  transition: all 0.3s ease;\
\}\
\
.practice-btn:hover \{\
  background-color: black;\
  color: white;\
\}\
```\
\
---\
\
### **3. Pass Data to `context-practice.html`**\
\
Since HTML doesn't support direct data passing, use **`localStorage`** to transfer sentences and unknown words.\
\
#### \uc0\u9989  JavaScript in `learn-sentences.html`\
```javascript\
// In script.js or inline\
document.getElementById("start-context-practice").addEventListener("click", function () \{\
  const sentences = [];\
  const unknownWords = JSON.parse(localStorage.getItem("unknownWordList") || "[]"); // Assume stored\
\
  // Get all sentence elements that contain unknown words\
  document.querySelectorAll("#sentences p").forEach(p => \{\
    const text = p.textContent;\
    const wordList = p.getAttribute("data-words")?.split(",") || [];\
    \
    // Check if any word in this sentence is unknown\
    const hasUnknown = wordList.some(word => unknownWords.includes(word.trim()));\
    \
    if (hasUnknown) \{\
      sentences.push(text);\
    \}\
  \});\
\
  // Save to localStorage for the next page\
  localStorage.setItem("contextPracticeSentences", JSON.stringify(sentences));\
  localStorage.setItem("unknownWordList", JSON.stringify(unknownWords));\
\
  // Navigate\
  window.location.href = "context-practice.html";\
\});\
```\
\
> \uc0\u55357 \u56481  `data-words` helps identify which words in a sentence are potentially unknown.\
\
---\
\
### **4. Build `context-practice.html`**\
\
```html\
<!DOCTYPE html>\
<html lang="en">\
<head>\
  <meta charset="UTF-8" />\
  <title>Context-Based Vocabulary Practice</title>\
  <link rel="stylesheet" href="css/style.css" />\
</head>\
<body>\
  <div class="container">\
    <h1>Context-Based Vocabulary Practice</h1>\
    <p>Type the missing words directly in the blanks!</p>\
    <div id="practice-text"></div>\
  </div>\
\
  <script src="js/script.js"></script>\
</body>\
</html>\
```\
\
---\
\
### **5. Render Practice Text with Placeholders (`script.js`)**\
\
Add this logic to `script.js` and run it on `context-practice.html`.\
\
```javascript\
// Only run on context-practice.html\
if (window.location.pathname.endsWith("context-practice.html")) \{\
  const sentences = JSON.parse(localStorage.getItem("contextPracticeSentences") || "[]");\
  const unknownWords = JSON.parse(localStorage.getItem("unknownWordList") || "[]");\
  const container = document.getElementById("practice-text");\
\
  if (sentences.length === 0) \{\
    container.innerHTML = "<p>No sentences with unknown words found.</p>";\
    return;\
  \}\
\
  sentences.forEach(sentence => \{\
    let processedSentence = sentence;\
\
    // Replace each unknown word with a contenteditable span\
    unknownWords.forEach(word => \{\
      const regex = new RegExp('\\\\b' + word + '\\\\b', 'gi'); // Match whole word\
      if (sentence.match(regex)) \{\
        const placeholder = '_'.repeat(word.length);\
        const replacement = `<span \
          class="word-blank" \
          contenteditable="true" \
          data-correct="$\{word\}" \
          aria-label="Type the missing word">$\{placeholder\}</span>`;\
        processedSentence = processedSentence.replace(regex, replacement);\
      \}\
    \});\
\
    // Create paragraph and insert\
    const p = document.createElement("p");\
    p.innerHTML = processedSentence;\
    container.appendChild(p);\
  \});\
\
  // Add event listener for typing\
  document.addEventListener("input", function (e) \{\
    const el = e.target;\
    if (el.classList.contains("word-blank")) \{\
      const correct = el.getAttribute("data-correct");\
      const typed = el.textContent.trim();\
\
      if (typed.toLowerCase() === correct.toLowerCase()) \{\
        el.classList.add("correct");\
        el.contentEditable = "false"; // Lock after correct\
        el.style.cursor = "default";\
      \} else \{\
        el.classList.remove("correct");\
      \}\
    \}\
  \});\
\}\
```\
\
---\
\
### **6. Style the Blanks (`style.css`)**\
\
```css\
.word-blank \{\
  display: inline-block;\
  min-width: 50px;\
  border-bottom: 2px dashed #000;\
  padding: 0 4px;\
  margin: 0 2px;\
  outline: none;\
  font-family: inherit;\
  background-color: #f0f0f0;\
  user-select: none;\
\}\
\
.word-blank:focus \{\
  background-color: #e0f7fa;\
  border-bottom-color: #0277bd;\
\}\
\
.correct \{\
  background-color: #c8e6c9 !important;\
  border-bottom: 2px solid #388e3c !important;\
  color: #1b5e20;\
  font-weight: bold;\
\}\
\
.correct:focus \{\
  background-color: #c8e6c9;\
\}\
```\
\
---\
\
### \uc0\u9989  Summary: What You\'92ve Built\
\
| Feature | Implemented? | How |\
|-------|-------------|-----|\
| Button to start practice | \uc0\u9989  | HTML + hover CSS |\
| Filter sentences with unknown words | \uc0\u9989  | `data-words` + JS filtering |\
| Transfer data between pages | \uc0\u9989  | `localStorage` |\
| Hide unknown words with underscores | \uc0\u9989  | JS string replace + spans |\
| Editable placeholders | \uc0\u9989  | `contenteditable="true"` |\
| Inline typing (no popup box) | \uc0\u9989  | Direct input in span |\
| Auto-check on type | \uc0\u9989  | Input event + compare |\
| Visual feedback (correct/incorrect) | \uc0\u9989  | CSS classes |\
\
---\
\
### \uc0\u55357 \u56615  Optional Enhancements\
\
- **Sound feedback** on correct answer\
- **Progress bar** showing how many words completed\
- **Hint button** (e.g., show first letter)\
- **Case-insensitive matching**\
- **Prevent spaces/special characters** in blanks\
- **Save progress** to `localStorage`\
\
---\
\
### \uc0\u55357 \u56524  Final Notes\
\
- Make sure `unknownWordList` is always stored in `localStorage` from your main app.\
- Use `data-words` to tag which words in a sentence are relevant.\
- This solution works **without a backend** \'97 ideal for static sites.\
- Test on mobile: `contenteditable` works, but may need `-webkit-user-select: none` for better UX.\
\
}